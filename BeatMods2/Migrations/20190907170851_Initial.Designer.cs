// <auto-generated />
using System;
using System.Collections.Generic;
using BeatMods2.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace BeatMods2.Migrations
{
    [DbContext(typeof(ModRepoContext))]
    [Migration("20190907170851_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("BeatMods2.Models.Download", b =>
                {
                    b.Property<Guid>("Mod");

                    b.Property<string>("Type");

                    b.Property<string>("CdnFile")
                        .IsRequired();

                    b.Property<string>("Hashes")
                        .IsRequired();

                    b.Property<Guid?>("ModUUID");

                    b.HasKey("Mod", "Type");

                    b.HasIndex("ModUUID");

                    b.ToTable("Download");
                });

            modelBuilder.Entity("BeatMods2.Models.GameVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("SteamBuildId")
                        .IsRequired();

                    b.Property<string>("VersionName")
                        .IsRequired();

                    b.Property<string>("Visibility")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasAlternateKey("VersionName");

                    b.ToTable("GameVersions");
                });

            modelBuilder.Entity("BeatMods2.Models.GameVersion_Group_Join", b =>
                {
                    b.Property<Guid>("GameVersionId");

                    b.Property<Guid>("GroupId");

                    b.HasKey("GameVersionId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("GameVersion_Group_Join");
                });

            modelBuilder.Entity("BeatMods2.Models.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<List<string>>("Permissions");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("BeatMods2.Models.Mod", b =>
                {
                    b.Property<Guid>("UUID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApprovalState")
                        .IsRequired();

                    b.Property<DateTime?>("Approved");

                    b.Property<Guid>("AuthorId");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<Guid>("GameVersionId");

                    b.Property<string>("Id")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<bool>("Required");

                    b.Property<string>("System")
                        .IsRequired();

                    b.Property<DateTime>("Uploaded");

                    b.Property<Guid>("UploadedById");

                    b.Property<string>("Version")
                        .IsRequired();

                    b.HasKey("UUID");

                    b.HasAlternateKey("Id", "Version");

                    b.HasIndex("AuthorId");

                    b.HasIndex("GameVersionId");

                    b.HasIndex("UploadedById");

                    b.ToTable("Mods");
                });

            modelBuilder.Entity("BeatMods2.Models.ModRange", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ModUUID");

                    b.Property<Guid?>("ModUUID1");

                    b.Property<string>("VersionRange")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ModUUID");

                    b.HasIndex("ModUUID1");

                    b.ToTable("ModRange");
                });

            modelBuilder.Entity("BeatMods2.Models.Mod_Tag_Join", b =>
                {
                    b.Property<Guid>("ModId");

                    b.Property<Guid>("TagId");

                    b.HasKey("ModId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("Mod_Tag_Join");
                });

            modelBuilder.Entity("BeatMods2.Models.News", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AuthorId");

                    b.Property<string>("Body")
                        .IsRequired();

                    b.Property<DateTime?>("Edited");

                    b.Property<DateTime>("Posted");

                    b.Property<int?>("System");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("BeatMods2.Models.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("BeatMods2.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<string>("GithubId")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Profile")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasAlternateKey("GithubId");

                    b.HasAlternateKey("Name");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BeatMods2.Models.User_Group_Join", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("GroupId");

                    b.HasKey("UserId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("User_Group_Join");
                });

            modelBuilder.Entity("BeatMods2.Models.Download", b =>
                {
                    b.HasOne("BeatMods2.Models.Mod")
                        .WithMany("Downloads")
                        .HasForeignKey("ModUUID");
                });

            modelBuilder.Entity("BeatMods2.Models.GameVersion_Group_Join", b =>
                {
                    b.HasOne("BeatMods2.Models.GameVersion", "GameVersion")
                        .WithMany("VisibleTo")
                        .HasForeignKey("GameVersionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BeatMods2.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BeatMods2.Models.Mod", b =>
                {
                    b.HasOne("BeatMods2.Models.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BeatMods2.Models.GameVersion", "GameVersion")
                        .WithMany()
                        .HasForeignKey("GameVersionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BeatMods2.Models.User", "UploadedBy")
                        .WithMany()
                        .HasForeignKey("UploadedById")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BeatMods2.Models.ModRange", b =>
                {
                    b.HasOne("BeatMods2.Models.Mod")
                        .WithMany("ConflictsWith")
                        .HasForeignKey("ModUUID");

                    b.HasOne("BeatMods2.Models.Mod")
                        .WithMany("DependsOn")
                        .HasForeignKey("ModUUID1");
                });

            modelBuilder.Entity("BeatMods2.Models.Mod_Tag_Join", b =>
                {
                    b.HasOne("BeatMods2.Models.Mod", "Mod")
                        .WithMany("Tags")
                        .HasForeignKey("ModId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BeatMods2.Models.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BeatMods2.Models.News", b =>
                {
                    b.HasOne("BeatMods2.Models.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BeatMods2.Models.User_Group_Join", b =>
                {
                    b.HasOne("BeatMods2.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BeatMods2.Models.User", "User")
                        .WithMany("Groups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
